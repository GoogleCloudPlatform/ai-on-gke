apiVersion: blueprints.cloud.google.com/v1alpha1
kind: BlueprintMetadata
metadata:
  name: ai-on-gke-display
  annotations:
    config.kubernetes.io/local-config: "true"
spec:
  info:
    title: RAG-on-GKE Application
    source:
      repo: https://github.com/GoogleCloudPlatform/ai-on-gke
      sourceType: git
      dir: /applications/rag
  ui:
    input:
      variables:
        acknowledge:
          name: acknowledge
          title: Check to confirm you enabled Google APIs for your project with this command.
          section: acknowledge
          subtext: |
                  <pre>
                    <code style="background: #f4f4f4;border: 1px solid #ddd; border-left: 3px solid #3367d6; color: #6d6868; font-size: 12px; max-width: 100%; padding: 0.5em 0.5em; display: inline; line-height: 45px;">gcloud services enable serviceusage.googleapis.com cloudresourcemanager.googleapis.com</code>
                   </pre>
          enumValueLabels:
            - label: Confirm that all prerequisites have been met.
              value: "true"
        additional_labels:
          name: additional_labels
          title: Additional Labels
          invisible: true
          section: required_config
        autopilot_cluster:
          name: autopilot_cluster
          title: GKE Cluster Type
          section: required_config
          enumValueLabels:
            - label: Autopilot Cluster
              value: "true"
            - label: Standard Cluster
              value: "false"
          invisible: true
        cluster_name:
          name: cluster_name
          title: GKE cluster name
          section: required_config
        cluster_location:
          name: cluster_location
          title: GKE Cluster Location
          section: required_config
          xGoogleProperty:
            type: ET_GCE_REGION
            # specified regions have L4 & T4 GPUs https://cloud.google.com/compute/docs/gpus/gpu-regions-zones#view-using-tools
            gce_region:
              allowlisted_regions: ["asia-east1","asia-southeast1","europe-west1","europe-west4","us-central1","us-east1","us-east4","us-west1","us-west4"]
        cpu_pools:
          name: cpu_pools
          title: Cpu Pools
          invisible: true
        create_brand:
          name: create_brand
          title: Create Brand
          invisible: true
        create_cluster:
          name: create_cluster
          title: Create GKE Cluster
          section: required_config
          invisible: true
        create_gcs_bucket:
          name: create_gcs_bucket
          title: Create Gcs Bucket
          invisible: true
          section: required_config
        create_jupyter_service_account:
          name: create_jupyter_service_account
          title: Create Jupyter Service Account
          invisible: true
          section: required_config
        create_network:
          name: create_network
          title: Create Network
          invisible: true
          section: required_config
        create_rag_service_account:
          name: create_rag_service_account
          title: Create Rag Service Account
          invisible: true
          section: required_config
        create_ray_service_account:
          name: create_ray_service_account
          title: Create Ray Service Account
          invisible: true
          section: required_config
        dataset_embeddings_table_name:
          name: dataset_embeddings_table_name
          title: Dataset Embeddings Table Name
          invisible: true
          section: required_config
        disable_ray_cluster_network_policy:
          name: disable_ray_cluster_network_policy
          title: Disable Ray Cluster Network Policy
          invisible: true
          section: required_config
        enable_grafana_on_ray_dashboard:
          name: enable_grafana_on_ray_dashboard
          title: Enable Grafana On Ray Dashboard
          invisible: true
          section: required_config
        iap_consent_info:
          name: iap_consent_info
          title: Confirm your OAuth consent screen is configured correctly.
          section: iap_auth_info
        frontend_add_auth:
          name: frontend_add_auth
          title: Enable IAP for the chat application
          section: iap_auth_info
        frontend_domain:
          name: frontend_domain
          title: Domain to host the chat interface
          section: iap_auth_info
        frontend_members_allowlist:
          name: frontend_members_allowlist
          title: Allowlist users to access the chat application
          section: iap_auth_info
        gcs_bucket:
          name: gcs_bucket
          title: GCS bucket
          section: required_config
          xGoogleProperty:
            type: ET_GCS_BUCKET
        cloudsql_instance:
          name: cloudsql_instance
          title: CloudSQL Instance
          section: required_config
        cloudsql_instance_region:
          name: cloudsql_instance_region
          title: Cloudsql Instance Region
          invisible: true
          section: required_config
        goog_cm_deployment_name:
          name: goog_cm_deployment_name
          title: Goog Cm Deployment Name
        jupyter_add_auth:
          name: jupyter_add_auth
          title: Enable IAP for JupyterHub
          section: iap_auth_info
        jupyter_domain:
          name: jupyter_domain
          title: Domain to host JupyterHub
          section: iap_auth_info
        jupyter_members_allowlist:
          name: jupyter_members_allowlist
          title: Allowlist users to access JupyterHub
          section: iap_auth_info
        jupyter_service_account:
          name: jupyter_service_account
          title: Jupyter Service Account
          invisible: true
          section: required_config
        kubernetes_namespace:
          name: kubernetes_namespace
          title: Kubernetes Namespace
          invisible: true
          section: required_config
        network_name:
          name: network_name
          title: Network Name
          invisible: true
          section: required_config
        private_cluster:
          name: private_cluster
          title: Private Cluster
          invisible: true
          section: required_config
        project_id:
          name: project_id
          title: Project Id
          invisible: true
        rag_service_account:
          name: rag_service_account
          title: Rag Service Account
          invisible: true
          section: required_config
        ray_dashboard_add_auth:
          name: ray_dashboard_add_auth
          title: Enable IAP for Ray dashboard
          section: iap_auth_info
        ray_dashboard_domain:
          name: ray_dashboard_domain
          title: Domain to host the Ray dashboard
          section: iap_auth_info
        ray_dashboard_members_allowlist:
          name: ray_dashboard_members_allowlist
          title: Allowlist users to access the Ray dashboard
          section: iap_auth_info
        ray_service_account:
          name: ray_service_account
          title: Ray Service Account
          invisible: true
          section: required_config
      sections:
        - name: acknowledge
          title: Before you begin
          subtext: 
                This solution deploys a sample <a href="https://github.com/GoogleCloudPlatform/ai-on-gke/blob/release-1.1/applications/rag/README.md#what-is-rag"><i>RAG</i></a> application on GKE in your project with the following components&#58;</br>
                &emsp;&emsp;1&#41; Inference server using LLM (<a href="https://huggingface.co/mistralai/Mistral-7B-v0.1"><i>Hugging Face Mistral-7B</i></a>)</br>
                &emsp;&emsp;2&#41; A <a href="https://github.com/GoogleCloudPlatform/ai-on-gke/blob/release-1.1/applications/rag/example_notebooks/rag-kaggle-ray-sql-interactive.ipynb"><i>Jupyter notebook</i></a> provided with code that&#58;</br>
                &emsp;&emsp;&emsp;&#x2022; Writes a sample TV shows/movies dataset to a GCS bucket.</br>
                &emsp;&emsp;&emsp;&#x2022; Runs a <a href="https://docs.ray.io/en/latest/cluster/running-applications/job-submission/index.html"><i>Ray job</i></a> to generate vector embeddings for the data.</br>
                &emsp;&emsp;&emsp;&#x2022; Writes generated vector embeddings to Cloud SQL <a href="https://github.com/pgvector/pgvector"<i>pgvector</i></a> database.</br>
                &emsp;&emsp;3&#41; Chat frontend application for prompt interactions which&#58;</br>
                &emsp;&emsp;&emsp;&#x2022; Fetches context from the generated vector embeddings related to your prompt.</br>
                &emsp;&emsp;&emsp;&#x2022; Augments the original prompt with the context.</br>
                &emsp;&emsp;&emsp;&#x2022; Queries the LLM with the augmented prompt to return more relevant results.
        - name: required_config
          title: Required configuration
        - name: iap_auth_info
          title: Optional authentication with Identity-Aware Proxy
          subtext: With <a href="https://cloud.google.com/iap/docs/enabling-kubernetes-howto"><i>IAP authentication</i></a>, you can control user access to the JupyterHub, Ray dashboard and/or chat applications. To use IAP, you will need to do the following:</br>
                  <p>
                  &emsp;&emsp;&#x2022; Identify domains for each application, and</br>
                  &emsp;&emsp;&#x2022; Create <a href="https://cloud.google.com/dns/docs/records#add_a_record"<i>DNS A records</i></a> for the domains after the applications are deployed.
                  </p>
                  Without IAP, users will need to access the GKE cluster and use port-forward to connect to the chat application, JupyterHub, and/or Ray dashboard.
        - name: rag_iap_auth
          title: Configure authenticated access for chat interface
        - name: ray_iap_auth
          title: Configure authenticated access for Ray dashboard
        - name: jupyter_iap_auth
          title: Configure authenticated access for JupyterHub
    runtime:
      outputMessage: Deployment can take 30-40 minutes to complete.
      suggestedActions:
        - heading: "Step 1: If you enabled IAP authenticated access, create DNS A records for the JupyterHub and chat application domains."
          description: If you enabled IAP for JupyterHub or the chat application, create <a href="https://cloud.google.com/dns/docs/records#add_a_record">DNS A record sets</a> for them. The instructions may be different based on your domain provider. Propagation takes 10-15 minutes and logging in won’t succeed until it’s done.
        - heading: "Step 2: Launch JupyterHub"
          description: |-
            <p>
            1&#41; If IAP is disabled, port forward to the JupyterHub service:</br>
            &emsp;&#x2022; Setup <a href="https://cloud.google.com/sdk/docs/install">gcloud</a> in your environment.</br>
            &emsp;&#x2022; Get these values from the Outputs section above: <b>Gke Cluster Name</b>, <b>Gke Cluster Location</b>, <b>Kubernetes Namespace</b> , <b>Project Id</b>, <b>Jupyterhub User</b> and <b>Jupyterhub Password</b> </br>
            &emsp;&#x2022; Get cluster credentials: <pre><code style="background: #f4f4f4;border: 1px solid #ddd; border-left: 3px solid #3367d6; color: #6d6868; font-size: 12px; max-width: 100%; padding: 0.5em 0.5em; display: inline;">gcloud container clusters get-credentials &ltGke Cluster Name&gt --location=&ltGke Cluster Location&gt --project=&ltProject Id&gt</code></pre></br>
            &emsp;&#x2022; Port forward to JupyterHub: <pre><code style="background: #f4f4f4;border: 1px solid #ddd; border-left: 3px solid #3367d6; color: #6d6868; font-size: 12px; max-width: 100%; padding: 0.5em 0.5em; display: inline; line-height: 35px;">kubectl -n &ltKubernetes Namespace&gt port-forward service/proxy-public 3080:80</code></pre> </br>
            &emsp;&#x2022; Go to <b>localhost:3080</b> in a browser and log in with <b>Jupyterhub User</b> and <b>Jupyterhub Password</b>
            </p>
            <p>
            2&#41; If IAP is enabled, log in with your organization's credentials. Troubleshooting access issues:</br>
            &emsp;&#x2022; SSL or cert errors indicate the cert is provisioning which takes up to 20 minutes.</br>
            &emsp;&#x2022; If you're unable to login, go to <a href="https://console.cloud.google.com/security/iap">Google Cloud Platform IAP</a>, select the <b>proxy-public</b> service and add the user with the role <b>IAP-secured Web App User</b>.
            </p>
            <p>3&#41; Once logged in, choose the <b>CPU with Default Storage</b> option and wait for JupyterLab to load.</p>
        - heading: "Step 3: Generate Vector Embeddings for the Dataset"
          description: |-
            Go to File -> Open From URL & upload and execute the notebook <a href="https://raw.githubusercontent.com/GoogleCloudPlatform/ai-on-gke/main/applications/rag/example_notebooks/rag-kaggle-ray-sql-interactive.ipynb"><i>rag-kaggle-ray-sql.ipynb</i></a>. Note that this requires creating a <a href="https://www.kaggle.com/account/login?phase=startRegisterTab&returnUrl=%2F">Kaggle account</a> and updating the first notebook cell with your Kaggle credentials to download the sample dataset (TV show/movie reviews). 
            Follow the <a href="https://github.com/GoogleCloudPlatform/ai-on-gke/blob/main/applications/rag/README.md#generate-vector-embeddings-for-the=-dataset">README.md</a> for detailed instructions.
        - heading: "Step 4: Launch Frontend Chat Application"
          description: |-
            <p>
            1&#41; If IAP is disabled, port forward to the frontend chat service:</br>
            &emsp;&#x2022; Setup <a href="https://cloud.google.com/sdk/docs/install">gcloud</a> in your environment.</br>
            &emsp;&#x2022; Get these values from the Outputs section above: <b>Gke Cluster Name</b>, <b>Gke Cluster Location</b>, <b>Kubernetes Namespace</b> , <b>Project Id</b> </br>
            &emsp;&#x2022; Get cluster credentials: <pre><code style="background: #f4f4f4;border: 1px solid #ddd; border-left: 3px solid #3367d6; color: #6d6868; font-size: 12px; max-width: 100%; padding: 0.5em 0.5em; display: inline;">gcloud container clusters get-credentials &ltGke Cluster Name&gt --location=&ltGke Cluster Location&gt --project=&ltProject Id&gt</code></pre></br>
            &emsp;&#x2022; Port forward to the chat interface: <pre><code style="background: #f4f4f4;border: 1px solid #ddd; border-left: 3px solid #3367d6; color: #6d6868; font-size: 12px; max-width: 100%; padding: 0.5em 0.5em; display: inline; line-height: 35px;">kubectl -n &ltKubernetes Namespace&gt port-forward service/rag-frontend 8080:8080</code></pre> </br>
            &emsp;&#x2022; Go to <b>localhost:8080</b> in a browser to launch the chat interface.</br>
            </p>
            <p>
            2&#41; If IAP is enabled, log in with your organization's credentials. Troubleshooting access issues:</br>
            &emsp;&#x2022; SSL or cert errors indicate the cert is provisioning which takes up to 20 minutes.</br>
            &emsp;&#x2022; If you're unable to login, go to <a href="https://console.cloud.google.com/security/iap">Google Cloud Platform IAP</a>, select the <b>rag-frontend</b> service and add the user with the role <b>IAP-secured Web App User</b>.
            </p>
        - heading: "Step 5: Prompt the LLM with context from the TV shows/movies dataset"
          description: |-
            <li>Prompt the chat application with questions about TV shows or movies. This will fetch context related to your prompt from the generated vector embeddings, augment the original prompt with the context & query the LLM (Mistral-7B) with the augmented prompt to return more relevant results.</li>
            <li>Try out the sensitive language censoring and moderation filters in the chat application.</li>
      outputs:
        frontend_ip_address: {}
        frontend_uri:
          openInNewTab: true
          showInNotification: true
          label: Launch Frontend Chat Application
        gcp_network: {}
        jupyterhub_ip_address: {}
        jupyterhub_password: {}
        jupyterhub_uri:
          openInNewTab: true
          showInNotification: true
          label: Launch JupyterHub
        jupyterhub_user: {}
        kubernetes_namespace: {}
        gke_cluster_name: {}
        gke_cluster_location: {}
        project_id: {}
        ray_dashboard_ip_address: {}
        ray_dashboard_uri:
          openInNewTab: true
          showInNotification: true
          label: Launch Ray Dashboard

