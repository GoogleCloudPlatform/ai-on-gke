# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - id: 'validate platform'
    name: 'gcr.io/$PROJECT_ID/terraform'
    script: |
      terraform init -no-color
      terraform validate -no-color
    dir: 'infrastructure/'
    waitFor: ['-']
  
  - id: 'validate ray'
    name: 'gcr.io/$PROJECT_ID/terraform'
    script: |
      terraform init -no-color
      terraform validate -no-color
    dir: 'applications/ray/'
    waitFor: ['-']
  
  - id: 'validate jupyterhub'
    name: 'gcr.io/$PROJECT_ID/terraform'
    script: |
      terraform init -no-color
      terraform validate -no-color
    dir: 'applications/jupyter/'
    waitFor: ['-']

  - id: 'create gke cluster'
    name: 'gcr.io/$PROJECT_ID/terraform'
    env:
      - "KUBE_LOAD_CONFIG_FILE=false"
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -e
        terraform apply -var-file=tfvars_tests/standard-gke-public.platform.tfvars -var=project_id=$PROJECT_ID \
        -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-cluster \
        -var=cluster_region=$_REGION -auto-approve -no-color
        echo "pass" > /workspace/gke_cluster_result.txt
    dir: 'infrastructure/'
    allowFailure: true
    waitFor: ['validate platform', 'validate ray', 'validate jupyterhub']
  
  - id: 'test ray cluster'
    name: 'gcr.io/$PROJECT_ID/terraform'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        set -e

        # Get kube config
        gcloud container clusters get-credentials \
        ml-$SHORT_SHA-$_PR_NUMBER-cluster \
        --location $_REGION \
        --project $PROJECT_ID 

        cd applications/ray/
        terraform apply \
        -var-file=workloads.tfvars \
        -var=project_id=$PROJECT_ID \
        -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-cluster \
        -var=cluster_location=$_REGION \
        -var=ray_namespace=ml-$SHORT_SHA \
        -var=gcp_service_account=ray-sa-$SHORT_SHA \
        -var=gcs_bucket=gke-aieco-ray-$SHORT_SHA \
        -auto-approve -no-color
        echo "pass" > /workspace/user_result.txt

        # Make sure pods are running
        kubectl wait --all pods -n ml-$SHORT_SHA --for=condition=Ready --timeout=300s
        kubectl port-forward -n ml-$SHORT_SHA service/example-cluster-kuberay-head-svc 8265:8265 &
        # Wait port-forwarding to take its place
        sleep 5s

        ray job submit --working-dir ./example_ray_job_scripts \
        --address=http://127.0.0.1:8265 -- python ray_job.py 
        echo "pass" > /workspace/ray_result.txt
    allowFailure: true
    waitFor: ['create gke cluster']

  - id: 'test jupyterhub'
    name: 'gcr.io/$PROJECT_ID/terraform'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e

        cd /workspace/modules/jupyter/tests
        python3 change_jupyter_config.py

        cd /workspace/applications/jupyter
        terraform apply \
        -var-file=workloads-without-iap.example.tfvars \
        -var=project_id=$PROJECT_ID \
        -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-cluster \
        -var=namespace=ml-$SHORT_SHA \
        -var=workload_identity_service_account=jupyter-sa-$SHORT_SHA \
        -var=gcs_bucket=gke-aieco-jupyter-$SHORT_SHA \
        -auto-approve -no-color
        echo "pass" > /workspace/jupyterhub_tf_result.txt

        kubectl wait --all pods -n ml-$SHORT_SHA --for=condition=Ready --timeout=300s
        kubectl get services -n ml-$SHORT_SHA
        kubectl get service proxy-public -n ml-$SHORT_SHA --output jsonpath='{.status.loadBalancer.ingress[0].ip}' > /workspace/jupyterhub_host_url.txt
        echo "HOST URL is " $(cat /workspace/jupyterhub_host_url.txt)

        cd /workspace/modules/jupyter/tests
        python3 test_hub.py $(cat /workspace/jupyterhub_host_url.txt)
        echo "pass" > /workspace/jupyterhub_test_result.txt
    allowFailure: true
    waitFor: ['test ray cluster']

  - id: 'clean gke cluster'
    name: 'gcr.io/$PROJECT_ID/terraform'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -e

        cd /workspace/applications/jupyter/
        terraform destroy \
        -var-file=workloads-without-iap.example.tfvars \
        -var=project_id=$PROJECT_ID \
        -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-cluster \
        -var=namespace=ml-$SHORT_SHA \
        -var=workload_identity_service_account=jupyter-sa-$SHORT_SHA \
        -var=gcs_bucket=gke-aieco-jupyter-$SHORT_SHA \
        -auto-approve -no-color

        cd /workspace/applications/ray/
        terraform destroy \
        -var-file=workloads.tfvars \
        -var=project_id=$PROJECT_ID \
        -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-cluster \
        -var=cluster_location=$_REGION \
        -var=ray_namespace=ml-$SHORT_SHA \
        -var=gcp_service_account=ray-sa-$SHORT_SHA \
        -var=gcs_bucket=gke-aieco-ray-$SHORT_SHA \
        -auto-approve -no-color

        cd /workspace/infrastructure
        terraform destroy -var-file=tfvars_tests/standard-gke-public.platform.tfvars -var=project_id=$PROJECT_ID \
        -var=cluster_name=ml-$SHORT_SHA-$_PR_NUMBER-cluster \
        -var=cluster_region=$_REGION -auto-approve -no-color
    allowFailure: true
    waitFor: ['test jupyterhub']

  - id: 'check result'
    name: 'gcr.io/$PROJECT_ID/terraform'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [[ $(cat /workspace/gke_cluster_result.txt) != "pass" ]]; then
          echo "gke cluster creation failed"
          exit 1
        fi

        if [[ $(cat /workspace/ray_result.txt) != "pass" ]]; then
          echo "ray API run failed"
          exit 1
        fi

        if [[ $(cat /workspace/user_result.txt) != "pass" ]]; then
          echo "ray cluster failed"
          exit 1
        fi

        if [[ $(cat /workspace/jupyterhub_tf_result.txt) != "pass" ]]; then
          echo "jupyterhub tf failed"
          exit 1
        fi

        if [[ $(cat /workspace/jupyterhub_test_result.txt) != "pass" ]]; then
          echo "jupyterhub test failed"
          exit 1
        fi
    waitFor: ['clean gke cluster']
        
substitutions:
  _REGION: us-central1
  _USER_NAME: github
