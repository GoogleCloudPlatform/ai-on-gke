# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Configure HTCondor Secrets
  hosts: localhost
  become: true
  vars:
    condor_config_root: /etc/condor
  tasks:
  - name: Ensure necessary variables are set
    ansible.builtin.assert:
      that:
      - htcondor_role is defined
      - password_id is defined
      - trust_domain is defined
  - name: Set Pool Trust Domain
    ansible.builtin.copy:
      dest: "{{ condor_config_root }}/config.d/51-ghpc-trust-domain"
      mode: 0644
      content: |
        # these lines must appear AFTER any "use role:" settings
        UID_DOMAIN = {{ trust_domain }}
        TRUST_DOMAIN = {{ trust_domain }}
  - name: Get HTCondor Pool password (token signing key)
    when: htcondor_role != 'get_htcondor_execute'
    ansible.builtin.shell: |
      set -e -o pipefail +o history
      POOL_PASSWORD=$(gcloud secrets versions access latest --secret={{ password_id }})
      echo -n "$POOL_PASSWORD" | sh -c "condor_store_cred add -c -i -"
    args:
      creates: "{{ condor_config_root }}/passwords.d/POOL"
      executable: /bin/bash
  - name: Configure HTCondor Central Manager
    when: htcondor_role == 'get_htcondor_central_manager'
    block:
    - name: Create IDTOKEN for Central Manager
      ansible.builtin.shell: |
        umask 0077
        condor_token_create -identity condor@{{ trust_domain }} \
          -token condor@{{ trust_domain }}
      args:
        creates: "{{ condor_config_root }}/tokens.d/condor@{{ trust_domain }}"
    - name: Create IDTOKEN secret for Execute Points
      when: xp_idtoken_secret_id | length > 0
      changed_when: true
      ansible.builtin.shell: |
        umask 0077
        TMPFILE=$(mktemp)
        condor_token_create -authz READ -authz ADVERTISE_MASTER \
            -authz ADVERTISE_STARTD -identity condor@{{ trust_domain }} > "$TMPFILE"
        gcloud secrets versions add --data-file "$TMPFILE" {{ xp_idtoken_secret_id }}
        rm -f "$TMPFILE"
  - name: Configure HTCondor SchedD
    when: htcondor_role == 'get_htcondor_submit'
    block:
    - name: Create IDTOKEN to advertise access point
      ansible.builtin.shell: |
        umask 0077
        # DAEMON authorization can likely be removed in future when scopes
        # needed to trigger a negotiation cycle are changed. Suggest review
        # https://opensciencegrid.atlassian.net/jira/software/c/projects/HTCONDOR/issues/?filter=allissues
        condor_token_create -authz READ -authz ADVERTISE_MASTER \
          -authz ADVERTISE_SCHEDD -authz DAEMON -identity condor@{{ trust_domain }} \
          -token condor@{{ trust_domain }}
      args:
        creates: "{{ condor_config_root }}/tokens.d/condor@{{ trust_domain }}"
  - name: Configure HTCondor StartD
    when: htcondor_role == 'get_htcondor_execute'
    block:
    - name: Create SystemD override directory for HTCondor Execute Point
      ansible.builtin.file:
        path: /etc/systemd/system/condor.service.d
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: Fetch IDTOKEN to advertise execute point
      ansible.builtin.copy:
        dest: "/etc/systemd/system/condor.service.d/htcondor-token-fetcher.conf"
        mode: 0644
        content: |
          [Service]
          ExecStartPre=gcloud secrets versions access latest --secret {{ xp_idtoken_secret_id }} \
              --out-file {{ condor_config_root }}/tokens.d/condor@{{ trust_domain }}
      notify:
      - Reload SystemD
  handlers:
  - name: Reload SystemD
    ansible.builtin.systemd:
      daemon_reload: true
